(() => {
    "use strict";
  
    const formatMoney = (num, digits = 2) =>
      num.toLocaleString(void 0, {
        minimumFractionDigits: digits,
        maximumFractionDigits: digits,
      });
  
    const products = [
        {
            id: "p1",
            name: "Wireless Headphones",
            price: 59.99,
            category: "Audio",
            img: "https://i5.walmartimages.com/asr/55501d33-1f42-48d8-b46f-79492dfbd036.928b61d27bedb51b0ebfb41d9a945a45.jpeg",
          },
      {
        id: "p2",
        name: "IPhone",
        price: 99.99,
        category: "Device",
        img: "https://images.unsplash.com/photo-1603921326210-6edd2d60ca68?w=640&q=60&auto=format&fit=crop",
      },
      {
        id: "p3",
    name: "Backpack",
    price: 39.5,
    category: "Accessories",
    img: "https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:fafafa,w_750,h_750/global/090918/02/fnd/IND/fmt/png/PUMA-x-SQUID-GAME-Backpack",
      },
      {
        id: "p4",
    name: "Gaming Mouse",
    price: 24.99,
    category: "Peripherals",
    img: "https://m.media-amazon.com/images/I/61Mk3YqYHpL.jpg",
      },
      {
        id: "p5",
        name: "Mechanical Keyboard",
        price: 79.99,
        category: "Peripherals",
        img: "https://images.unsplash.com/photo-1517336714731-489689fd1ca8?w=640&q=60&auto=format&fit=crop",
      },
      {
        id: "p6",
        name: "Sunglasses",
        price: 19.99,
        category: "Accessories",
        img: "https://images.unsplash.com/photo-1511499767150-a48a237f0083?w=640&q=60&auto=format&fit=crop",
      },
      {
        id: "p7",
        name: "Bluetooth Speaker",
        price: 45,
        category: "Audio",
        img: "https://images.unsplash.com/photo-1512446816042-444d641267d4?w=640&q=60&auto=format&fit=crop",
      },
      {
        id: "p8",
        name: "Travel Mug",
        price: 14.5,
        category: "Lifestyle",
        img: "https://images.unsplash.com/photo-1498804103079-a6351b050096?w=640&q=60&auto=format&fit=crop",
      },
    ];
  
    const doc = document;
  
    function categories() {
      const set = new Set(products.map((p) => p.category));
      return ["all", ...Array.from(set)];
    }
  
    function $(sel) {
      return doc.querySelector(sel);
    }
  
    function $all(sel) {
      return doc.querySelectorAll(sel);
    }
  
    function setYear() {
      $("#year").textContent = new Date().getFullYear().toString();
    }
  
    function route() {
      const current = location.hash.replace("#", "") || "home";
      $all(".route").forEach((el) => {
        el.hidden = el.dataset.route !== current;
      });
      const active = $(`[data-link][href="#${current}"]`);
      $all("[data-link]").forEach((a) => a.classList.remove("active"));
      if (active) active.classList.add("active");
    }
  
    function saveCart(cart) {
      localStorage.setItem("t5_cart", JSON.stringify(cart));
    }
  
    function readCart() {
      try {
        return JSON.parse(localStorage.getItem("t5_cart") || "[]");
      } catch (_e) {
        return [];
      }
    }
  
    function updateCartCount() {
      const count = readCart().reduce((acc, item) => acc + item.qty, 0);
      $("#cart-count").textContent = String(count);
    }

    // Auth utilities
    function saveUser(user) {
      localStorage.setItem("t5_user", JSON.stringify(user));
    }

    function readUser() {
      try {
        return JSON.parse(localStorage.getItem("t5_user") || "null");
      } catch (_e) {
        return null;
      }
    }

    function setAuthUI() {
      const user = readUser();
      const loginLink = $("#nav-login");
      const signupLink = $("#nav-signup");
      const logoutBtn = $("#logout-btn");
      if (!loginLink || !signupLink || !logoutBtn) return;
      if (user) {
        loginLink.style.display = "none";
        signupLink.style.display = "none";
        logoutBtn.style.display = "inline";
        logoutBtn.textContent = `Logout (${user.name || user.email})`;
      } else {
        loginLink.style.display = "inline";
        signupLink.style.display = "inline";
        logoutBtn.style.display = "none";
        logoutBtn.textContent = "Logout";
      }
    }
  
    function renderProducts(list) {
      const grid = $("#product-grid");
      grid.setAttribute("aria-busy", "true");
      grid.innerHTML = "";
  
      const html = (list && list.length ? list : products)
        .map(
          (p) => `
        <article class="card" data-id="${p.id}">
          <img class="card-img" src="${p.img}" alt="${p.name}" loading="lazy" width="320" height="180">
          <div class="card-body">
            <h3>${p.name}</h3>
            <p class="muted">${p.category}</p>
            <div class="card-actions">
              <span class="price">$${formatMoney(p.price)}</span>
              <button class="btn-primary" data-add>Add to cart</button>
            </div>
          </div>
        </article>`
        )
        .join("");
  
      grid.innerHTML = html;
      grid.setAttribute("aria-busy", "false");
    }
  
    function renderCategoryFilter() {
      const el = $("#category");
      el.innerHTML = categories()
        .map((c) => `<option value="${c}">${c[0].toUpperCase() + c.slice(1)}</option>`)
        .join("");
    }
  
    function renderCart() {
      const wrap = $("#cart-items");
      wrap.setAttribute("aria-busy", "true");
  
      const cart = readCart();
      if (!cart.length) {
        wrap.innerHTML = '<p class="muted">Your cart is empty.</p>';
        const totals = { subtotal: 0, tax: 0, total: 0 };
        renderTotals(totals);
        wrap.setAttribute("aria-busy", "false");
        return;
      }
  
      const itemsHtml = cart
        .map(
          (p) => `
        <div class="cart-item" data-id="${p.id}">
          <img src="${p.img}" alt="${p.name}" width="80" height="80" loading="lazy">
          <div>
            <div>${p.name}</div>
            <div class="muted">$${formatMoney(p.price)}</div>
          </div>
          <div class="qty">
            <button data-dec aria-label="Decrease quantity">-</button>
            <span>${p.qty}</span>
            <button data-inc aria-label="Increase quantity">+</button>
          </div>
          <button class="btn-secondary" data-remove>Remove</button>
        </div>`
        )
        .join("");
  
      wrap.innerHTML = itemsHtml;
  
      const subtotal = cart.reduce((sum, p) => sum + p.price * p.qty, 0);
      const tax = subtotal * 0.08;
      const total = subtotal + tax;
  
      renderTotals({ subtotal, tax, total });
      wrap.setAttribute("aria-busy", "false");
    }
  
    function renderTotals(t) {
      $("#subtotal").textContent = `$${formatMoney(t.subtotal)}`;
      $("#tax").textContent = `$${formatMoney(t.tax)}`;
      $("#total").textContent = `$${formatMoney(t.total)}`;
    }
  
    function initShop() {
      renderCategoryFilter();
      renderProducts();
      updateCartCount();
    }
  
    function bindEvents() {
      const grid = $("#product-grid");
      if (grid) {
        grid.addEventListener("click", function (evt) {
          const target = evt.target;
          if (!(target instanceof Element)) return;
  
          const addBtn = target.closest("[data-add]");
          if (!addBtn) return;

          // Require auth before adding to cart
          const currentUser = readUser();
          if (!currentUser) {
            alert("Please login or signup to add items to your cart.");
            location.hash = "#login";
            return;
          }
  
          const id = target.closest(".card").dataset.id;
          const cart = readCart();
          let found = cart.find((c) => c.id === id);
  
          if (!found) {
            const p = window.products.find((x) => x.id === id);
            found = { id: p.id, name: p.name, price: p.price, img: p.img, qty: 0 };
          }
  
          found.qty += 1;
          const others = cart.filter((c) => c.id !== id);
          saveCart([...others, found]);
          updateCartCount();
        });
      }
  
      const cartWrap = $("#cart-items");
      if (cartWrap) {
        cartWrap.addEventListener("click", function (evt) {
          const target = evt.target;
          if (!(target instanceof Element)) return;
  
          // Remove
          const removeBtn = target.closest("[data-remove]");
          if (removeBtn) {
            const id = target.closest(".cart-item").dataset.id;
            const next = readCart().filter((c) => c.id !== id);
            saveCart(next);
            updateCartCount();
            renderCart();
            return;
          }
  
          // Increase
          const incBtn = target.closest("[data-inc]");
          if (incBtn) {
            const id = target.closest(".cart-item").dataset.id;
            const cart = readCart();
            const item = cart.find((c) => c.id === id);
            item.qty += 1;
            saveCart(cart);
            updateCartCount();
            renderCart();
          }
  
          // Decrease
          const decBtn = target.closest("[data-dec]");
          if (decBtn) {
            const id = target.closest(".cart-item").dataset.id;
            const cart = readCart();
            const item = cart.find((c) => c.id === id);
            item.qty = Math.max(0, item.qty - 1);
            if (item.qty) {
              saveCart(cart);
            } else {
              saveCart(cart.filter((c) => c.id !== id));
            }
            updateCartCount();
            renderCart();
          }
        });
      }
  
      const search = $("#search");
      const category = $("#category");
      const clear = $("#clear-filters");
  
      // Helper to apply filters
      function applyFilters() {
        const q = (search && search.value) || "";
        const query = q.toLowerCase();
  
        const selected = (category && category.value) || "all";
        const list = products.filter((p) => {
          const hay = (p.name + " " + p.category).toLowerCase();
          const matchesQuery = !query || hay.includes(query);
          const categoryKey = selected === "all" ? "all" : selected;
          const matchesCat =
            categoryKey === "all" || p.category.toLowerCase() === categoryKey.toLowerCase();
          return matchesQuery && matchesCat;
        });
  
        renderProducts(list);
      }
  
      if (search) {
        search.addEventListener("input", () => {
          const q = search.value.toLowerCase();
          const sel = category.value;
          const list = products.filter((p) => {
            const hay = (p.name + " " + p.category).toLowerCase();
            const okQ = !q || hay.includes(q);
            const catKey = sel === "all" ? "all" : sel;
            const okC = catKey === "all" || p.category.toLowerCase() === catKey.toLowerCase();
            return okQ && okC;
          });
          renderProducts(list);
        });
      }
  
      if (category) {
        category.addEventListener("change", () => {
          const q = search.value.toLowerCase();
          const sel = category.value;
          const list = products.filter((p) => {
            const hay = (p.name + " " + p.category).toLowerCase();
            const okQ = !q || hay.includes(q);
            const catKey = sel === "all" ? "all" : sel;
            const okC = catKey === "all" || p.category.toLowerCase() === catKey.toLowerCase();
            return okQ && okC;
          });
          renderProducts(list);
        });
      }
  
      if (clear) {
        clear.addEventListener("click", () => {
          if (search) search.value = "";
          if (category) category.value = "all";
          renderProducts(products);
        });
      }

      // Auth: Signup
      const signupForm = $("#signup-form");
      if (signupForm) {
        signupForm.addEventListener("submit", (e) => {
          e.preventDefault();
          const name = $("#signup-name").value.trim();
          const email = $("#signup-email").value.trim();
          const password = $("#signup-password").value.trim();
          if (!name || !email || password.length < 6) {
            alert("Please fill all fields. Password must be at least 6 characters.");
            return;
          }
          const user = { name, email };
          saveUser(user);
          setAuthUI();
          location.hash = "#home";
          alert("Account created. You're now logged in.");
        });
      }

      // Auth: Login
      const loginForm = $("#login-form");
      if (loginForm) {
        loginForm.addEventListener("submit", (e) => {
          e.preventDefault();
          const email = $("#login-email").value.trim();
          const password = $("#login-password").value.trim();
          if (!email || password.length < 6) {
            alert("Enter a valid email and password (min 6 chars).");
            return;
          }
          const user = { email, name: email.split("@")[0] };
          saveUser(user);
          setAuthUI();
          location.hash = "#home";
          alert("Logged in successfully.");
        });
      }

      // Auth: Logout
      const logoutBtn = $("#logout-btn");
      if (logoutBtn) {
        logoutBtn.addEventListener("click", () => {
          localStorage.removeItem("t5_user");
          setAuthUI();
          location.hash = "#home";
        });
      }
    }
  
    window.products = products;
  
    window.addEventListener("hashchange", route, { passive: true });
  
    window.addEventListener(
      "load",
      () => {
        setYear();
        route();
        initShop();
        renderCart();
        bindEvents();
        setAuthUI();
  
        const checkout = $("#checkout");
        if (checkout) {
          checkout.addEventListener("click", () => {
            const user = readUser();
            const cart = readCart();
            if (!cart.length) {
              alert("Your cart is empty.");
              return;
            }
            if (!user) {
              alert("Please login or signup to continue to checkout.");
              location.hash = "#login";
              return;
            }
            const orderId = Math.random().toString(36).slice(2, 8).toUpperCase();
            localStorage.removeItem("t5_cart");
            updateCartCount();
            renderCart();
            alert(`Thank you, ${user.name || user.email}! Your order ${orderId} has been placed.`);
          });
        }
      },
      { once: true }
    );
  })();
  